CREATE TABLE BloombergSapiLog (
    LogID INT IDENTITY(1,1) PRIMARY KEY,              -- Unique identifier for each log entry
    RequestType NVARCHAR(50) NOT NULL,               -- Type of request (e.g., "Authentication", "Data", "Reference")
    Endpoint NVARCHAR(255) NOT NULL,                 -- The Bloomberg SAPI endpoint called
    RequestPayload NVARCHAR(MAX) NULL,               -- JSON or raw request payload sent
    ResponsePayload NVARCHAR(MAX) NULL,              -- JSON or raw response payload received
    StatusCode INT NULL,                              -- HTTP or SAPI-specific status code
    StatusMessage NVARCHAR(255) NULL,                -- Short message about the status (e.g., "Success", "Failed")
    Timestamp DATETIME NOT NULL DEFAULT GETDATE(),   -- When the request was logged
    DurationMs INT NULL,                              -- Duration of the request in milliseconds
    ApiKey NVARCHAR(100) NULL,                       -- API Key used (if applicable)
    User NVARCHAR(100) NULL,                         -- User making the request (if applicable)
    ClientIP NVARCHAR(50) NULL,                      -- IP address of the client making the call
    ErrorDetails NVARCHAR(MAX) NULL,                 -- Detailed error information (if any)
    Metadata NVARCHAR(MAX) NULL                      -- Additional metadata (e.g., session IDs)
);

public interface IBloombergSapiLogRepository
{
    Task<int> AddRequestLogAsync(BloombergSapiLog log);
    Task UpdateResponseLogAsync(string correlationId, string responsePayload, int statusCode, string statusMessage);
}

public class BloombergSapiLogRepository : IBloombergSapiLogRepository
{
    private readonly DbContext _context; // Replace with your actual DbContext class

    public BloombergSapiLogRepository(DbContext context)
    {
        _context = context;
    }

    // Add a new log entry for the request
    public async Task<int> AddRequestLogAsync(BloombergSapiLog log)
    {
        _context.Set<BloombergSapiLog>().Add(log);
        await _context.SaveChangesAsync();
        return log.LogID; // Return the LogID of the inserted row
    }

    // Update the log entry with the response based on CorrelationId
    public async Task UpdateResponseLogAsync(string correlationId, string responsePayload, int statusCode, string statusMessage)
    {
        var log = await _context.Set<BloombergSapiLog>()
            .FirstOrDefaultAsync(l => l.CorrelationId == correlationId);

        if (log == null)
            throw new KeyNotFoundException($"Log with CorrelationId '{correlationId}' not found.");

        log.ResponsePayload = responsePayload;
        log.StatusCode = statusCode;
        log.StatusMessage = statusMessage;
        log.DurationMs = (int)(DateTime.UtcNow - log.Timestamp).TotalMilliseconds;

        await _context.SaveChangesAsync();
    }
}


var repository = new BloombergSapiLogRepository(context);

var newLog = new BloombergSapiLog
{
    RequestType = "Authentication",
    Endpoint = "/auth",
    RequestPayload = "{ 'apiKey': 'XYZ' }",
    CorrelationId = Guid.NewGuid().ToString(), // Generate CorrelationId
    ApiKey = "XYZ",
    User = "test_user",
    ClientIP = "192.168.1.1",
    Metadata = "Additional info"
};

int logId = await repository.AddRequestLogAsync(newLog);
Console.WriteLine($"Log entry created with LogID: {logId}");



await repository.UpdateResponseLogAsync(
    correlationId: "existing-correlation-id",
    responsePayload: "{ 'success': true }",
    statusCode: 200,
    statusMessage: "OK"
);
Console.WriteLine("Log entry updated with response details.");
